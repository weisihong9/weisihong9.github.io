{"meta":{"title":"WeiSH's BLOG","subtitle":"MaTRix","description":"","author":"weisihong","url":"https://weisihong9.github.io","root":"/"},"pages":[{"title":"关于","date":"2023-05-21T15:33:58.437Z","updated":"2023-05-20T13:09:31.547Z","comments":false,"path":"about/index.html","permalink":"https://weisihong9.github.io/about/index.html","excerpt":"","text":"Weisihong：生命科学与技术学院，健康与康复科学研究所的研究生 研究方向：信号预处理、EEG与fNIRS多模态融合、时频分析、脑网络功能连接算法、机器学习、统计分析"},{"title":"分类","date":"2023-05-21T15:34:11.984Z","updated":"2023-05-21T15:34:11.984Z","comments":false,"path":"categories/index.html","permalink":"https://weisihong9.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言","date":"2023-05-21T15:13:23.000Z","updated":"2023-05-21T15:34:41.059Z","comments":true,"path":"guestbook/index.html","permalink":"https://weisihong9.github.io/guestbook/index.html","excerpt":"","text":""},{"title":"项目仓库","date":"2023-05-21T15:34:31.651Z","updated":"2023-05-21T15:34:31.651Z","comments":false,"path":"repository/index.html","permalink":"https://weisihong9.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-05-21T15:34:49.343Z","updated":"2023-05-21T15:34:49.343Z","comments":false,"path":"tags/index.html","permalink":"https://weisihong9.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CrossFrequencyCoupling","slug":"CrossFrequencyCoupling","date":"2023-07-05T05:00:49.000Z","updated":"2023-07-05T05:35:30.475Z","comments":true,"path":"2023/07/05/CrossFrequencyCoupling/","link":"","permalink":"https://weisihong9.github.io/2023/07/05/CrossFrequencyCoupling/","excerpt":"","text":"目的：介绍跨频耦合的背景及常用的计算。 1、背景 神经科学的核心问题之一是神经活动如何在不同的空间和时间尺度上协调。 跨频率耦合(Cross-frequency coupling, CFC) 已被提出在时间和空间尺度上协调神经动力学。 时间尺度：神经振荡之间的相幅耦合。例如，低频振荡的相位可以影响高频振荡的振幅，从而调节神经活动的时序，实现信息处理和集成。 空间尺度：神经振荡之间的空间耦合。例如，不同频率范围内的神经振荡可以在不同脑区之间相互调节，形成神经网络，实现信息的传递和整合。 EEG信号的CFC是指不同频率范围内的神经振荡之间存在相互调节和交互作用的现象。换句话说，CFC实际上是不同频带EEG的幅度/频率/相位之间的关系。常见的耦合关系如下：【慢震荡（Slow Oscillation，SO）；快震荡（ Fast Oscillation，FO ）】 相位-幅度耦合(phase-amplitude coupling，PAC)：SO的相位与FO幅度之间的耦合，也称为“嵌套”。目前研究比较多的是θ - γ和α - γ之间的PAC。 相位-频率耦合(phase- frequency coupling，PFC)：SO的相位和FO的频率之间的耦合。 相位-相位耦合(phase-phase coupling，PPC)：SO和FO相位之间的耦合。 2、CFC在神经疾病中的应用 跨频耦合作为一种神经机制，在多种神经疾病中都得到了广泛研究： 癫痫：研究表明[1]， 跨频频率耦合是定位癫痫组织的有用生物标志物。 帕金森病：研究表明[2]，theta-gamma跨频耦合可以作为帕金森疾病的生物标志，并有助于对帕金森疾病的早期诊断和治疗进行监测。 精神分裂症：研究表明[3]， theta-gamma跨频耦合减弱与认知障碍症状的严重程度有关。 抑郁症：研究表明[4]，抑郁症患者与健康对照组相比，前额叶皮层的theta-gamma跨频耦合存在显著差异。 3、CFC常用计算方法 锁相值（phase-locking value，PLV） 平均向量长度（mean vector length，MVL） 调制指数（modulation index，MI） 3.1 锁相值（phase-locking value，PLV） 定义：PLV通过比较两个信号的相位差来评估它们之间的同步性。 计算步骤： 计算公式： 优点和缺点： python代码实现： 3.2 平均向量长度（mean vector length，MVL） 定义： 计算步骤： 计算公式： 优点和缺点： python代码实现： 3.3 调制指数（modulation index，MI） 定义： 计算步骤： 计算公式： 优点和缺点： python代码实现： 4、置换检验 参考文献 [1] Li, C., et al., 2021. High-frequency hubs of the ictal cross-frequency coupling network predict surgical outcome in epilepsy patients. IEEE Transactions on Neural Systems and Rehabilitation Engineering, 29, pp.1290-1299. (2区) [2] Salimpour, Y. and Anderson, W.S., 2019. Cross-frequency coupling based neuromodulation for treating neurological disorders. Frontiers in neuroscience, 13, p.125. (3区) [3] Musaeus, C.S., et al., 2020. Electroencephalographic cross-frequency coupling as a sign of disease progression in patients with mild cognitive impairment: a pilot study. Frontiers in neuroscience, 14, p.790. (3区) [4] Zhang, W., et al., 2023. Altered fronto-central theta-gamma coupling in major depressive disorder during auditory steady-state responses. Clinical Neurophysiology, 146, pp.65-76. (3区)","categories":[{"name":"EEG","slug":"EEG","permalink":"https://weisihong9.github.io/categories/EEG/"}],"tags":[{"name":"CFC, PLV, MVL, MI","slug":"CFC-PLV-MVL-MI","permalink":"https://weisihong9.github.io/tags/CFC-PLV-MVL-MI/"}]},{"title":"EEG_TopoMap","slug":"EEG_TopoMap","date":"2023-07-02T16:00:00.000Z","updated":"2023-07-05T05:08:47.908Z","comments":true,"path":"2023/07/03/EEG_TopoMap/","link":"","permalink":"https://weisihong9.github.io/2023/07/03/EEG_TopoMap/","excerpt":"","text":"目的：利用MNE实现自定义矩阵大脑拓扑图的绘制 0、加载python库 123456import numpy as npimport matplotlib.pyplot as pltimport pandas as pdimport mne%matplotlib qt 1、获取可用的电极布局系统 在使用MNE进行EEG信号的可视化操作时，往往需要导入对应电极的位置信息，MNE中有内置的常见电极布局系统，通过调用下面指令进行导入： 123456789101112131415161718192021222324252627282930mne.channels.get_builtin_montages()# output:[&#x27;standard_1005&#x27;, &#x27;standard_1020&#x27;, &#x27;standard_alphabetic&#x27;, &#x27;standard_postfixed&#x27;, &#x27;standard_prefixed&#x27;, &#x27;standard_primed&#x27;, &#x27;biosemi16&#x27;, &#x27;biosemi32&#x27;, &#x27;biosemi64&#x27;, &#x27;biosemi128&#x27;, &#x27;biosemi160&#x27;, &#x27;biosemi256&#x27;, &#x27;easycap-M1&#x27;, &#x27;easycap-M10&#x27;, &#x27;EGI_256&#x27;, &#x27;GSN-HydroCel-32&#x27;, &#x27;GSN-HydroCel-64_1.0&#x27;, &#x27;GSN-HydroCel-65_1.0&#x27;, &#x27;GSN-HydroCel-128&#x27;, &#x27;GSN-HydroCel-129&#x27;, &#x27;GSN-HydroCel-256&#x27;, &#x27;GSN-HydroCel-257&#x27;, &#x27;mgh60&#x27;, &#x27;mgh70&#x27;, &#x27;artinis-octamon&#x27;, &#x27;artinis-brite23&#x27;, &#x27;brainproducts-RNP-BA-128&#x27;] 从上面的输出可以看出，MNE中共有27个可用的电极布局系统，具体选择哪一个要看你采集数据时使用的脑电帽电极布局系统是哪个。 2、利用MNE自带的电极布局系统对矩阵进行通道定位 2.1 加载脑地形图位置坐标并可视化 123int32_montage = mne.channels.make_standard_montage(&#x27;biosemi32&#x27;)int32_montage.plot()plt.show() 2.2 构建自定义32导联的字典，导联名称与导联权重一一对应 1weight = &#123;&#x27;Fp1&#x27;: 0.31, &#x27;AF3&#x27;: -0.26, &#x27;F7&#x27;: 1.22, &#x27;F3&#x27;: 0.99, &#x27;Fz&#x27;: 0.71, &#x27;FC5&#x27;: 0.55, &#x27;FC1&#x27;: -1.19, &#x27;T7&#x27;: 0.61, &#x27;C3&#x27;: -0.80, &#x27;Cz&#x27;: 2.36, &#x27;CP5&#x27;: -0.74, &#x27;CP1&#x27;: 0.72, &#x27;P7&#x27;: 0.93, &#x27;P3&#x27;: 0.38, &#x27;Pz&#x27;: 1.07, &#x27;PO3&#x27;: -1.46, &#x27;O1&#x27;: -0.12, &#x27;Oz&#x27;: 1.074, &#x27;Fp2&#x27;: 1.04, &#x27;AF4&#x27;: -0.065, &#x27;F4&#x27;: -0.52, &#x27;F8&#x27;: 0.37, &#x27;FC2&#x27;: 1.30, &#x27;FC6&#x27;: 0.94, &#x27;C4&#x27;: -1.11, &#x27;T8&#x27;: -0.16, &#x27;CP2&#x27;: 1.82, &#x27;CP6&#x27;: 0.41, &#x27;P4&#x27;: 0.46, &#x27;P8&#x27;: 0.99, &#x27;PO4&#x27;:0.15, &#x27;O2&#x27;:0.23&#125; 2.3 根据脑地形图导联顺序重构自定义矩阵（*注意） 1234567891011# 查看脑地形图矩阵导联位置sensor_data_32 = int32_montage.get_positions()[&#x27;ch_pos&#x27;]sensor_dataframe_32 = pd.DataFrame(sensor_data_32).TchLa_index = sensor_dataframe_32.index.valuesprint(chLa_index)# 重构自定义矩阵顺序reWeight = []for key in chLa_index: val = weight[key] reWeight.append(val) 2.4 TopoMap可视化 2.4.1 创建info 12345info = mne.create_info( ch_names = chLa_index, ch_types = [&#x27;eeg&#x27;]*32, # 通道个数 sfreq = 1000) # 采样频率info.set_montage(int32_montage) 2.4.2 可视化 1234567im, cn = mne.viz.plot_topomap(reWeight, info, names = chLa_index.tolist(), # vlim=(-2, 2) )plt.colorbar(im)plt.show() 3、自定义电极布局文件对矩阵进行通道定位 假设我有一个64导联的帽子，根据实验需求，实验过程中我只选择中央区和顶叶区域的电极。 那么我们该如何根据自己选择的导联制定通道定位模版呢？ 这里有两种方法： 第一种：自定义新的电极布局文件，文件只包含实验选择的导联。这个方法的目的是教会你如何制作自己的电极布局文件，实际绘制时建议选择第二种方法。 第二种：使用原来的电极布局文件，先对矩阵进行归一化，后将未被选择的导联值置为0 4、第一种方法 4.1 下载标准的64通道电极布局系统坐标 12345# 读取MNE中biosemi64电极位置信息biosemi_montage = mne.channels.make_standard_montage(&#x27;biosemi64&#x27;)sensor_data_64 = biosemi_montage.get_positions()[&#x27;ch_pos&#x27;]sensor_dataframe_64 = pd.DataFrame(sensor_data_64).Tsensor_dataframe_64.to_excel(&#x27;sensor_dataframe_64.xlsx&#x27;) 4.2 根据下载文件，选择实验选取的电极坐标，保存为excel格式 1# 模仿下载的电极布局excel，自定义电极布局文件 4.3 加载自定义的excel文件，制作自己的montage 1234567myStardart = pd.read_excel(&#x27;mySensor_dataframe.xlsx&#x27;, index_col=0) # 读取自己的电极定位文件ch_names = np.array(myStardart.index) # 电极名称position = np.array(myStardart) # 电极坐标位置sensorPosition = dict(zip(ch_names, position)) # 制定为字典的形式myMontage = mne.channels.make_dig_montage(ch_pos=sensorPosition)myMontage.plot()plt.show() 4.4 自定义导联权重字典 1234myWeight = &#123;&#x27;C1&#x27;: 0.31, &#x27;C3&#x27;: 1.22, &#x27;P6&#x27;: 0.71, &#x27;P4&#x27;: 0.55,&#x27;P2&#x27;: -1.19, &#x27;CP5&#x27;: 0.61, &#x27;CP3&#x27;: -0.80, &#x27;CP1&#x27;: 2.36, &#x27;P1&#x27;: -0.74, &#x27;P3&#x27;: 0.72,&#x27;P5&#x27;: 0.93, &#x27;Pz&#x27;: -1.46, &#x27;CPz&#x27;: -0.12, &#x27;Cz&#x27;: 1.074,&#x27;C5&#x27;:2.34,&#x27;C2&#x27;: 1.04, &#x27;C4&#x27;: -0.065, &#x27;C6&#x27;: -0.52, &#x27;CP2&#x27;: 0.37, &#x27;CP4&#x27;: 1.30, &#x27;CP6&#x27;: 0.94&#125; 4.5 根据脑地形图导联顺序重构自定义矩阵（*注意） 123456789# 查看脑地形图矩阵导联位置my_chLa_index = ch_names.tolist()print(&#x27;脑地形图矩阵导联顺序:&#x27;,my_chLa_index)# 重构自定义矩阵顺序reMyWeight = []for key in my_chLa_index: val = myWeight[key] reMyWeight.append(val) 4.6 TopoMap可视化 4.6.1 创建info 12345myinfo = mne.create_info( ch_names = my_chLa_index, ch_types = [&#x27;eeg&#x27;]*21, # 通道个数 sfreq = 1000) # 采样频率myinfo.set_montage(myMontage) 4.6.2 可视化 12345678im, cn = mne.viz.plot_topomap(reMyWeight, myinfo, names = my_chLa_index, # vlim=(-2, 2) )plt.colorbar(im)plt.title(&#x27;My Montage&#x27;)plt.show() 5、第二种方法 5.1 读取标准的64通道电极布局系统坐标 1234567# 读取MNE中biosemi64电极位置信息biosemi_montage = mne.channels.make_standard_montage(&#x27;biosemi64&#x27;)sensor_data_64 = biosemi_montage.get_positions()[&#x27;ch_pos&#x27;]sensor_dataframe_64 = pd.DataFrame(sensor_data_64).TchLa_index_64 = sensor_dataframe_64.index.valuesbiosemi_montage.plot()plt.show() 5.2 构建自定义部分导联字典 1234myWeight = &#123;&#x27;C1&#x27;: 0.31, &#x27;C3&#x27;: 1.22, &#x27;P6&#x27;: 0.71, &#x27;P4&#x27;: 0.55,&#x27;P2&#x27;: -1.19, &#x27;CP5&#x27;: 0.61, &#x27;CP3&#x27;: -0.80, &#x27;CP1&#x27;: 2.36, &#x27;P1&#x27;: -0.74, &#x27;P3&#x27;: 0.72,&#x27;P5&#x27;: 0.93, &#x27;Pz&#x27;: -1.46, &#x27;CPz&#x27;: -0.12, &#x27;Cz&#x27;: 1.074,&#x27;C5&#x27;:2.34,&#x27;C2&#x27;: 1.04, &#x27;C4&#x27;: -0.065, &#x27;C6&#x27;: -0.52, &#x27;CP2&#x27;: 0.37, &#x27;CP4&#x27;: 1.30, &#x27;CP6&#x27;: 0.94&#125; 5.3 对字典的值进行归一化 123456789101112norMyWeiht = myWeight.copy()# Step 1: 获取需要归一化的值values = [v for v in norMyWeiht.values()]# Step 2: 找到最小值和最大值min_value = min(values)max_value = max(values)# Step 3: 对值进行归一化计算for key, value in norMyWeiht.items(): normalized_value = (value - min_value) / (max_value - min_value) norMyWeiht[key] = normalized_value 5.4 根据脑地形图导联顺序重构标准化后的矩阵，将未被选择的导联值置为0 123456789print(&#x27;脑地形图矩阵导联顺序:&#x27;,chLa_index_64)# 重构自定义矩阵顺序reNorMyWeight = []for key in chLa_index_64: if key in norMyWeiht: val = norMyWeiht[key] reNorMyWeight.append(val) else: reNorMyWeight.append(0) 5.5 TopoMap可视化 5.5.1 创建info 12345info = mne.create_info( ch_names = chLa_index_64.tolist(), ch_types = [&#x27;eeg&#x27;]*len(reNorMyWeight), # 通道个数 sfreq = 1000) # 采样频率info.set_montage(biosemi_montage) 5.5.2 可视化 123456789im, cn = mne.viz.plot_topomap(reNorMyWeight, info, names = chLa_index_64, cmap = &#x27;jet&#x27; # vlim=(-2, 2) )plt.colorbar(im)plt.title(&#x27;My Montage&#x27;)plt.show() 6、代码下载 https://github.com/weisihong9/EEG_TopoMap.git","categories":[{"name":"EEG","slug":"EEG","permalink":"https://weisihong9.github.io/categories/EEG/"},{"name":"BEAM","slug":"EEG/BEAM","permalink":"https://weisihong9.github.io/categories/EEG/BEAM/"}],"tags":[{"name":"BEAM","slug":"BEAM","permalink":"https://weisihong9.github.io/tags/BEAM/"}]},{"title":"Using_Markdown_writing","slug":"Using_Markdown_writing","date":"2023-05-21T08:54:43.000Z","updated":"2023-05-21T10:05:27.012Z","comments":true,"path":"2023/05/21/Using_Markdown_writing/","link":"","permalink":"https://weisihong9.github.io/2023/05/21/Using_Markdown_writing/","excerpt":"","text":"这是一级标题 下面开始说明如何使用markdown进行写作 这是二级标题 这是正文 换一行？ （在上一行后面按两次空格，再回车就是换一行） 换一段（按两次换行就是换一段） 1 强调 加粗了: 前后各加两个*号 斜体：前后各加一个星号 2 列表 自动编号：数字 + 点 + 空格即可 来一个二级标题 按一下回车，再tab就行 再来一个三级标题 按回车，再按tab 继续回车，再tab 3 插入图片：图床上传图片 把图片先上传到自己的图床，然后复制生成的图片链接。 格式为：!+[图片名字]+(http:\\……png) 图片注释 或者： 4 数学公式 lim⁡x→∞sin(x)x=1\\lim_{x \\to \\infin}\\frac{sin(x)}{x}=1 x→∞lim​xsin(x)​=1 在一段文字中插入公式: lim⁡x→∞f(x)\\lim_{x \\to \\infin}f(x)limx→∞​f(x), command + m 快捷键连按两次就可以生成4个美元符号然后输入公式 5 表格 EMD HHT HHSA 1 2 3 左对其 居中对齐 右对齐 调整编辑部分表格格式快捷键： 先选中表格内容，然后：Alt（fn+option） + shift + f 6 插入链接 复制网址，然后选中要给超链接的文字，直接：command + v 就行 这是一个laTex的链接 7 code 英文的三个小点：1左边的那个键 1234import numpy as npfrom PyEMD import EMDimport matplotlib.pyplot as plt 8 导航 9 将md文件导出为pdf 首先下载这个插件：Markdown Preview Enhanced 然后 command + shift + v 打开 Preview **.md 界面 最后在 Preview **.md 界面，右键，然后选中：Chrome(Puppeteer) --&gt; PDF 即可 10 这是该md文件的下载链接！","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://weisihong9.github.io/tags/Markdown/"}]},{"title":"EMD","slug":"EMD","date":"2023-05-20T16:58:43.000Z","updated":"2023-05-21T15:59:47.986Z","comments":true,"path":"2023/05/21/EMD/","link":"","permalink":"https://weisihong9.github.io/2023/05/21/EMD/","excerpt":"","text":"目的：利用python自带的 pyEMD 实现 经验模态分解（EMD） 1 加载python库 123import numpy as npfrom PyEMD import EMDimport matplotlib.pyplot as plt 2 EMD分解 12345678910111213141516171819202122# 生成示例信号t = np.linspace(0, 1, 1000)signal = np.sin(5 * 2 * np.pi * t) + np.sin(10 * 2 * np.pi * t)# 创建EMD对象emd = EMD()# 执行EMD分解IMFs = emd(signal)# 绘制分解后的IMFsplt.figure(figsize=(10, 6),dpi=600)plt.subplot(len(IMFs) + 1, 1, 1)plt.plot(t, signal, &#x27;b&#x27;)plt.title(&#x27;Original Signal&#x27;)for i, IMF in enumerate(IMFs): plt.subplot(len(IMFs) + 1, 1, i + 2) plt.plot(t, IMF, &#x27;r&#x27;) plt.title(&#x27;IMF %d&#x27; % (i + 1))plt.tight_layout()plt.show() 3 结束","categories":[{"name":"Signal processing","slug":"Signal-processing","permalink":"https://weisihong9.github.io/categories/Signal-processing/"},{"name":"EMD","slug":"Signal-processing/EMD","permalink":"https://weisihong9.github.io/categories/Signal-processing/EMD/"}],"tags":[{"name":"EMD","slug":"EMD","permalink":"https://weisihong9.github.io/tags/EMD/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-05-20T10:35:24.631Z","updated":"2023-05-20T10:35:24.632Z","comments":true,"path":"2023/05/20/hello-world/","link":"","permalink":"https://weisihong9.github.io/2023/05/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"EEG","slug":"EEG","permalink":"https://weisihong9.github.io/categories/EEG/"},{"name":"BEAM","slug":"EEG/BEAM","permalink":"https://weisihong9.github.io/categories/EEG/BEAM/"},{"name":"Signal processing","slug":"Signal-processing","permalink":"https://weisihong9.github.io/categories/Signal-processing/"},{"name":"EMD","slug":"Signal-processing/EMD","permalink":"https://weisihong9.github.io/categories/Signal-processing/EMD/"}],"tags":[{"name":"CFC, PLV, MVL, MI","slug":"CFC-PLV-MVL-MI","permalink":"https://weisihong9.github.io/tags/CFC-PLV-MVL-MI/"},{"name":"BEAM","slug":"BEAM","permalink":"https://weisihong9.github.io/tags/BEAM/"},{"name":"Markdown","slug":"Markdown","permalink":"https://weisihong9.github.io/tags/Markdown/"},{"name":"EMD","slug":"EMD","permalink":"https://weisihong9.github.io/tags/EMD/"}]}